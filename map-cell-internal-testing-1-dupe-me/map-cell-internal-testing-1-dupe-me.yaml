schemaVersion: 2
meta:
  sourceVersionId: d1afad69-ad06-4f32-83e0-ea000ee103b9 # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: DUPLICATE ME! ---- this is an example project used for internal map cell testing
  projectId: 74de4487-588b-4254-bc34-8717e42201d2 # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: Map Cell Internal Testing 1 (dupe me!)
  timezone: null
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status: null
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout: null
  publishedQueryCacheTimeout: null
projectAssets:
  dataConnections: []
  envVars: []
  secrets: []
sharedAssets:
  secrets: []
  vcsPackages:
    - vcsPackageId: 0d553024-32f2-4cfb-a56e-dac779ecbe30 # buie/package-sync-test
  dataConnections:
    - dataConnectionId: 5532da14-af66-4bfe-9e77-e2b90e1a33c7 # Demo Snowflake (snowflake)
    - dataConnectionId: 5b63b532-12fa-4088-8711-7afd9133d8e3 # Demo Database (redshift)
    - dataConnectionId: e73efc70-b0af-4d87-8760-e00a53c56dfc # dbt Server Test Account (snowflake)
  externalFileIntegrations: []
cells:
  - cellType: INPUT
    cellId: 9a629681-d21b-4c54-9d7e-a19f5f33651b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      inputType: MULTISELECT
      name: input_2
      outputType: DYNAMIC
      options:
        multiValueOptions:
          variableName: null
      defaultValue: []
  - cellType: CODE
    cellId: 96d310d9-0856-4975-8f88-bc53bce3b874 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        import pandas as pd
        import json

        value = "[{\"name\":\"Lafayette (LAFY)\",\"code\":\"LF\",\"address\":\"3601 Deer Hill Road, Lafayette CA 94549\",\"entries\":\"3481\",\"exits\":\"3616\",\"coordinates\":[-122.123801,37.893394]},{\"name\":\"12th St. Oakland City Center (12TH)\",\"code\":\"12\",\"address\":\"1245 Broadway, Oakland CA 94612\",\"entries\":\"13418\",\"exits\":\"13547\",\"coordinates\":[-122.271604,37.803664]},{\"name\":\"16th St. Mission (16TH)\",\"code\":\"16\",\"address\":\"2000 Mission Street, San Francisco CA 94110\",\"entries\":\"12409\",\"exits\":\"12351\",\"coordinates\":[-122.419694,37.765062]},{\"name\":\"19th St. Oakland (19TH)\",\"code\":\"19\",\"address\":\"1900 Broadway, Oakland CA 94612\",\"entries\":\"13108\",\"exits\":\"13090\",\"coordinates\":[-122.269029,37.80787]},{\"name\":\"24th St. Mission (24TH)\",\"code\":\"24\",\"address\":\"2800 Mission Street, San Francisco CA 94110\",\"entries\":\"12817\",\"exits\":\"12529\",\"coordinates\":[-122.418466,37.752254]},{\"name\":\"Ashby (ASHB)\",\"code\":\"AS\",\"address\":\"3100 Adeline Street, Berkeley CA 94703\",\"entries\":\"5452\",\"exits\":\"5341\",\"coordinates\":[-122.26978,37.853024]},{\"name\":\"Balboa Park (BALB)\",\"code\":\"BP\",\"address\":\"401 Geneva Avenue, San Francisco CA 94112\",\"entries\":\"11170\",\"exits\":\"9817\",\"coordinates\":[-122.447414,37.721981]},{\"name\":\"Bay Fair (BAYF)\",\"code\":\"BF\",\"address\":\"15242 Hesperian Blvd., San Leandro CA 94578\",\"entries\":\"5564\",\"exits\":\"5516\",\"coordinates\":[-122.126871,37.697185]},{\"name\":\"Castro Valley (CAST)\",\"code\":\"CV\",\"address\":\"3301 Norbridge Dr., Castro Valley CA 94546\",\"entries\":\"2781\",\"exits\":\"2735\",\"coordinates\":[-122.075567,37.690754]},{\"name\":\"Civic Center/UN Plaza (CIVC)\",\"code\":\"CC\",\"address\":\"1150 Market Street, San Francisco CA 94102\",\"entries\":\"24798\",\"exits\":\"22626\",\"coordinates\":[-122.413756,37.779528]},{\"name\":\"Colma (COLM)\",\"code\":\"CM\",\"address\":\"365 D Street, Colma CA 94014\",\"entries\":\"4397\",\"exits\":\"4214\",\"coordinates\":[-122.466233,37.684638]},{\"name\":\"Coliseum/Oakland Airport (COLS)\",\"code\":\"CL\",\"address\":\"7200 San Leandro St., Oakland CA 94621\",\"entries\":\"5837\",\"exits\":\"5902\",\"coordinates\":[-122.197273,37.754006]},{\"name\":\"Concord (CONC)\",\"code\":\"CN\",\"address\":\"1451 Oakland Avenue, Concord CA 94520\",\"entries\":\"6035\",\"exits\":\"6008\",\"coordinates\":[-122.029095,37.973737]},{\"name\":\"Daly City (DALY)\",\"code\":\"DC\",\"address\":\"500 John Daly Blvd., Daly City CA 94014\",\"entries\":\"8681\",\"exits\":\"8502\",\"coordinates\":[-122.469081,37.706121]},{\"name\":\"Downtown Berkeley (DBRK)\",\"code\":\"BK\",\"address\":\"2160 Shattuck Avenue, Berkeley CA 94704\",\"entries\":\"11043\",\"exits\":\"11762\",\"coordinates\":[-122.268045,37.869867]},{\"name\":\"El Cerrito del Norte (DELN)\",\"code\":\"EN\",\"address\":\"6400 Cutting Blvd., El Cerrito CA 94530\",\"entries\":\"8176\",\"exits\":\"8668\",\"coordinates\":[-122.317269,37.925655]},{\"name\":\"Dublin/Pleasanton (DUBL)\",\"code\":\"ED\",\"address\":\"5801 Owens Dr., Pleasanton CA 94588\",\"entries\":\"7702\",\"exits\":\"7554\",\"coordinates\":[-121.900367,37.701695]},{\"name\":\"Embarcadero (EMBR)\",\"code\":\"EM\",\"address\":\"298 Market Street, San Francisco CA 94111\",\"entries\":\"40376\",\"exits\":\"46951\",\"coordinates\":[-122.396742,37.792976]},{\"name\":\"Fremont (FRMT)\",\"code\":\"FM\",\"address\":\"2000 BART Way, Fremont CA 94536\",\"entries\":\"8748\",\"exits\":\"8673\",\"coordinates\":[-121.9764,37.557355]},{\"name\":\"Fruitvale (FTVL)\",\"code\":\"FV\",\"address\":\"3401 East 12th Street, Oakland CA 94601\",\"entries\":\"7701\",\"exits\":\"8012\",\"coordinates\":[-122.224274,37.774963]},{\"name\":\"Glen Park (GLEN)\",\"code\":\"GP\",\"address\":\"2901 Diamond Street, San Francisco CA 94131\",\"entries\":\"7732\",\"exits\":\"7072\",\"coordinates\":[-122.434092,37.732921]},{\"name\":\"Hayward (HAYW)\",\"code\":\"HY\",\"address\":\"699 'B' Street, Hayward CA 94541\",\"entries\":\"4958\",\"exits\":\"5003\",\"coordinates\":[-122.087967,37.670399]},{\"name\":\"Lake Merritt (LAKE)\",\"code\":\"LM\",\"address\":\"800 Madison Street, Oakland CA 94607\",\"entries\":\"6539\",\"exits\":\"6604\",\"coordinates\":[-122.265609,37.797484]},{\"name\":\"MacArthur (MCAR)\",\"code\":\"MA\",\"address\":\"555 40th Street, Oakland CA 94609\",\"entries\":\"9000\",\"exits\":\"9228\",\"coordinates\":[-122.267227,37.828415]},{\"name\":\"Millbrae (MLBR)\",\"code\":\"MB\",\"address\":\"200 North Rollins Road, Millbrae CA 94030\",\"entries\":\"6570\",\"exits\":\"6149\",\"coordinates\":[-122.38666,37.599787]},{\"name\":\"Montgomery St. (MONT)\",\"code\":\"MT\",\"address\":\"598 Market Street, San Francisco CA 94104\",\"entries\":\"43430\",\"exits\":\"45128\",\"coordinates\":[-122.401407,37.789256]},{\"name\":\"North Berkeley (NBRK)\",\"code\":\"NB\",\"address\":\"1750 Sacramento Street, Berkeley CA 94702\",\"entries\":\"4363\",\"exits\":\"4563\",\"coordinates\":[-122.283451,37.87404]},{\"name\":\"North Concord/Martinez (NCON)\",\"code\":\"NC\",\"address\":\"3700 Port Chicago Highway, Concord CA 94520\",\"entries\":\"2800\",\"exits\":\"2652\",\"coordinates\":[-122.024597,38.003275]},{\"name\":\"Orinda (ORIN)\",\"code\":\"OR\",\"address\":\"11 Camino Pablo, Orinda CA 94563\",\"entries\":\"2896\",\"exits\":\"2970\",\"coordinates\":[-122.183791,37.878361]},{\"name\":\"Pleasant Hill/Contra Costa Centre (PHIL)\",\"code\":\"PH\",\"address\":\"1365 Treat Blvd., Walnut Creek CA 94597\",\"entries\":\"7574\",\"exits\":\"7442\",\"coordinates\":[-122.056013,37.928403]},{\"name\":\"Pittsburg/Bay Point (PITT)\",\"code\":\"WP\",\"address\":\"1700 West Leland Road, Pittsburg CA 94565\",\"entries\":\"6262\",\"exits\":\"6343\",\"coordinates\":[-121.945154,38.018914]},{\"name\":\"El Cerrito Plaza (PLZA)\",\"code\":\"EP\",\"address\":\"6699 Fairmount Avenue, El Cerrito CA 94530\",\"entries\":\"4763\",\"exits\":\"4952\",\"coordinates\":[-122.299272,37.903059]},{\"name\":\"Powell St. (POWL)\",\"code\":\"PL\",\"address\":\"899 Market Street, San Francisco CA 94102\",\"entries\":\"29460\",\"exits\":\"25621\",\"coordinates\":[-122.406857,37.784991]},{\"name\":\"Richmond (RICH)\",\"code\":\"RM\",\"address\":\"1700 Nevin Avenue, Richmond CA 94801\",\"entries\":\"4184\",\"exits\":\"4029\",\"coordinates\":[-122.353165,37.936887]},{\"name\":\"Rockridge (ROCK)\",\"code\":\"RR\",\"address\":\"5660 College Avenue, Oakland CA 94618\",\"entries\":\"5299\",\"exits\":\"5775\",\"coordinates\":[-122.251793,37.844601]},{\"name\":\"San Leandro (SANL)\",\"code\":\"SL\",\"address\":\"1401 San Leandro Blvd., San Leandro CA 94577\",\"entries\":\"5836\",\"exits\":\"5921\",\"coordinates\":[-122.161311,37.722619]},{\"name\":\"San Bruno (SBRN)\",\"code\":\"SB\",\"address\":\"1151 Huntington Avenue, San Bruno CA 94066\",\"entries\":\"3628\",\"exits\":\"3634\",\"coordinates\":[-122.416038,37.637753]},{\"name\":\"San Francisco Int'l Airport (SFIA)\",\"code\":\"SO\",\"address\":\"International Terminal, Level 3, San Francisco Int'l Airport CA 94128\",\"entries\":\"5833\",\"exits\":\"4904\",\"coordinates\":[-122.392612,37.616035]},{\"name\":\"South Hayward (SHAY)\",\"code\":\"SH\",\"address\":\"28601 Dixon Street, Hayward CA 94544\",\"entries\":\"3007\",\"exits\":\"2829\",\"coordinates\":[-122.057551,37.6348]},{\"name\":\"South San Francisco (SSAN)\",\"code\":\"SS\",\"address\":\"1333 Mission Road, South San Francisco CA 94080\",\"entries\":\"3542\",\"exits\":\"3441\",\"coordinates\":[-122.444116,37.664174]},{\"name\":\"Union City (UCTY)\",\"code\":\"UC\",\"address\":\"10 Union Square, Union City CA 94587\",\"entries\":\"4772\",\"exits\":\"4770\",\"coordinates\":[-122.017867,37.591208]},{\"name\":\"Walnut Creek (WCRK)\",\"code\":\"WC\",\"address\":\"200 Ygnacio Valley Road, Walnut Creek CA 94596\",\"entries\":\"6719\",\"exits\":\"6917\",\"coordinates\":[-122.067423,37.905628]},{\"name\":\"West Dublin/Pleasanton (WDUB)\",\"code\":\"WD\",\"address\":\"6501 Golden Gate Drive, Dublin CA 94568\",\"entries\":\"3303\",\"exits\":\"3447\",\"coordinates\":[-121.928099,37.699759]},{\"name\":\"West Oakland (WOAK)\",\"code\":\"OW\",\"address\":\"1451 7th Street, Oakland CA 94607\",\"entries\":\"7312\",\"exits\":\"6838\",\"coordinates\":[-122.294582,37.804675]}]";
        bart_data = pd.DataFrame(json.loads(value))
  - cellType: COMPONENT_IMPORT
    cellId: 6ab7bd5f-9578-4829-8321-0f5516ffd67e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      component:
        id: a91c379a-d3c9-4752-9dba-bcb6f24dad48
        version: "19"
  - cellType: TEXT
    cellId: 9664947c-9e95-4f05-9a49-3469890f584c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "Go ahead and add a new "
            - bold: true
              text: "Map cell "
            - text: "(Display -> Map cell) using "
            - code: true
              text: bart_data
            - text: " as the data source."
  - cellType: COMPONENT_IMPORT
    cellId: 401f676a-9e47-415f-a6de-57c654e5a97b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      component:
        id: e9b9e124-e434-47f7-b9cf-35e70adb1f63
        version: "1"
  - cellType: TABLE_DISPLAY
    cellId: 5c26e945-3e38-4d26-8192-c5e5553dc2eb # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      dataFrameVariableName: ""
      resultVariable: table_result
      tableDisplayConfig:
        pageSize: 12
        height: null
        hideIcons: false
        hideIndex: false
        defaultSortColumn: null
        defaultSortIndexColumn: null
        defaultSortDirection: ASC
        conditionalFormatting: null
        filters: null
        columnProperties: []
        columnOrdering: null
        pinnedColumns: null
  - cellType: SQL
    cellId: 220ca4c5-ec4a-40bf-b863-4157671481c5 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        select f.* from public.flight_data f
        cross join public.flight_data d
        LIMIT 1000000
      dataFrameCell: false
      dataConnectionId: 5b63b532-12fa-4088-8711-7afd9133d8e3
      resultVariableName: dataframe
      useRichDisplay: false
      sqlCellOutputType: PANDAS
      useQueryMode: false
      castDecimals: true
      useNativeDates: false
      outputFilteredResult: false
      allowDuplicateColumns: true
      tableDisplayConfig: null
  - cellType: CODE
    cellId: 368571f5-9253-4f3f-8ca7-484d1cde8a3d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        import pandas as pd
        airports = pd.read_csv("airport-codes.csv")
  - cellType: CODE
    cellId: 14587410-a7e8-40c6-91f2-a90a5b0ca010 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: import pandas as pd
  - cellType: CODE
    cellId: 15b43d2f-5d90-4b90-a894-70f8957de41e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: import pandas as pd
  - cellType: CODE
    cellId: 1e83e778-a3b9-4727-953d-71b81b03501d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        ## this is also a great example of the annoyingness of us not being super duper clever with coordinates:
        airports['coordinates'][0]
  - cellType: SQL
    cellId: 73ef099f-ee26-4d32-9371-16a1f8ef43bb # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        SELECT *, str_split(coordinates,',')[1] AS lat,str_split(coordinates,',')[0] AS lon
        FROM airports
      dataFrameCell: true
      dataConnectionId: null
      resultVariableName: query_result
      useRichDisplay: false
      sqlCellOutputType: PANDAS
      useQueryMode: false
      castDecimals: true
      useNativeDates: false
      outputFilteredResult: false
      allowDuplicateColumns: true
      tableDisplayConfig: null
  - cellType: MAP
    cellId: 2f0b3e3f-0fdd-405c-8217-45574cf29651 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      height: 520
      map:
        theme: hex
        layers:
          - id: a9d3bc4b-a5bb-438e-ac86-2ed3e4c7a94b
            data:
              coordinates:
                system: latlng
              dataFrameName: dataframe
            fill:
              type: dynamic
              colors:
                - - 41
                  - 160
                  - 124
                - - 255
                  - 255
                  - 255
                - - 17
                  - 20
                  - 24
              dataFrameColumn: airline
            type: scatter
            radius:
              type: static
              value: 20
            opacity: 0.6
            visible: true
            tooltipDataFrameColumns: []
  - cellType: CHARTV2
    cellId: b951d1cc-5dc6-49d7-a13f-8c05e301ee37 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      height: null
      chartSpec:
        type: layered
        layers:
          - id: a2a7b17e-ee28-4109-8ce6-6640296c4dc3
            xAxis:
              type: string
              style:
                grid:
                  style: solid
                ticks: {}
                labels: {}
              dataFrameColumn: name
            series:
              - id: 5a63b530-3943-49d1-b3ca-c7e1ce6f9dc3
                type: bar
                axis:
                  type: string
                  style:
                    grid:
                      style: solid
                    ticks: {}
                    labels: {}
                  aggregate: count
                dataFrameColumns:
                  - code
                colorOrder: ascending
                color:
                  type: static
                opacity:
                  type: static
                  value: 1
                tooltip:
                  type: auto
                barWidth: 1
                orientation: vertical
                layout: grouped
            dataFrame: bart_data
        settings:
          legend:
            position: right
          tooltip: true
          selectionEnabled: false
      chartSelection: {}
      resultVariable: filter_result_2
      displayTableConfig: null
appLayout:
  fullWidth: false
  visibleMetadataFields:
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
    - NAME
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
  rows:
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 9664947c-9e95-4f05-9a49-3469890f584c
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 220ca4c5-ec4a-40bf-b863-4157671481c5
              height: null
              showLabel: true
